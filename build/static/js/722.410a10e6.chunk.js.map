{"version":3,"file":"static/js/722.410a10e6.chunk.js","mappings":"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","sources":["Redux/usersSelectors.js","webpack://my-app/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://my-app/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/PostReduxForm/PostReduxForm.jsx","components/Profile/MyPosts/MyPosts.jsx","Redux/profileSelectors.js","components/Profile/MyPosts/MyPostContainer.jsx","webpack://my-app/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","components/Profile/ProfileInfo/ProfileStatus/ProfileStatus.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx"],"sourcesContent":["import { createSelector } from \"reselect\";\r\n\r\nexport const getUsersData = (state) => (state.user.usersData);\r\nexport const getPageSize = (state) => (state.user.pageSize);\r\nexport const getTotalUsers = (state) => (state.user.totalUsers);\r\nexport const getCurrentPage = (state) => (state.user.selectedPage.currentPage);\r\nexport const getIsFetching = (state) => (state.user.isFetching);\r\nexport const getFollowingInProgress = (state) => (state.user.followingInProgress);\r\nexport const getProfileData = (state) => (state.user.profileData);\r\nexport const getPotionSize = (state) => (state.user.portionSize);\r\nexport const getCurrentPortion = (state) => (state.user.selectedPage.currentPortion)\r\n\r\n/* export const getUsersData = createSelector(getUsersDataSelector, (usersData) => (usersData)) */","// extracted by mini-css-extract-plugin\nexport default {\"postSpace\":\"MyPosts_postSpace__be02K\",\"newPost\":\"MyPosts_newPost__f10JE\",\"posts\":\"MyPosts_posts__isWT8\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__x3JHj\",\"avatar\":\"Post_avatar__zLQTQ\"};","import userImg from '../../../../assets/images/userImage.png';\r\nimport s from './Post.module.css'\r\n\r\nconst Post = (props) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <img className={s.avatar} src={props.profileData.photos.small != null ? props.profileData.photos.small : userImg} />\r\n            <p>{props.message}</p>\r\n            <button>likes: {props.likesCount}</button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Post;","import { Field, reduxForm, reset } from \"redux-form\";\r\nimport { required, maxLengthCreator } from '../../../../utils/validators/validators';\r\nimport { Textarea } from '../../../common/FormsControls/FormControls';\r\n\r\nconst afterSubmit = (result, dispatch) =>\r\n    dispatch(reset('post'));\r\n\r\nconst maxLegth30 = maxLengthCreator(30)\r\n\r\nconst addPostForm = (props) => (\r\n    <form onSubmit={props.handleSubmit}>\r\n        <div>\r\n            <Field\r\n                component={Textarea}\r\n                name='post'\r\n                placeholder='Что у вас нового?'\r\n                validate={[required, maxLegth30]}\r\n            />\r\n        </div>\r\n        <div>\r\n            <button>\r\n                Отпубликовать\r\n            </button>\r\n        </div>\r\n    </form>\r\n)\r\n\r\nconst PostReduxForm = reduxForm({ form: 'post', onSubmitSuccess: afterSubmit })(addPostForm)\r\n\r\nexport default PostReduxForm","import s from './MyPosts.module.css'\r\nimport Post from './Post/Post';\r\nimport Preloader from '../../common/preloader/Preloader';\r\nimport PostReduxForm from './PostReduxForm/PostReduxForm';\r\nimport React from 'react';\r\n\r\nconst MyPosts = React.memo((props) => {\r\n\r\n    if (!props.profileData) {\r\n        return <Preloader />\r\n    }\r\n\r\n    let postsElement = props.postsData.map((p) =>\r\n        <Post key={p.id} message={p.message} likesCount={p.likesCount} profileData={props.profileData} />);\r\n\r\n    const onSubmit = (formData) => {\r\n        props.addPost(formData.post)\r\n    }\r\n\r\n    return (\r\n        <div className={s.postSpace}>\r\n            <h3> Мои посты </h3>\r\n            <div className={s.newPost}>\r\n                <h4>Новый пост</h4>\r\n                <PostReduxForm onSubmit={onSubmit} />\r\n            </div>\r\n            <div>\r\n                <div className={s.posts}>\r\n                    {postsElement}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n})\r\n\r\nexport default MyPosts;","export const getStatus = (state) => (state.profile.status);\r\nexport const getPostData = (state) => (state.profile.postsData);\r\nexport const getNewPostText = (state) => (state.profile.newPostText);","import MyPosts from './MyPosts';\r\nimport { addPost } from '../../../Redux/profileReducer';\r\nimport { connect } from 'react-redux';\r\nimport { getProfileData } from '../../../Redux/usersSelectors';\r\nimport { getPostData, getNewPostText } from '../../../Redux/profileSelectors';\r\n\r\nlet mapStateToProps = (state) => ({\r\n    postsData: getPostData(state),\r\n    newPostText: getNewPostText(state),\r\n    profileData: getProfileData(state)\r\n})\r\n\r\nexport default connect(mapStateToProps, { addPost })(MyPosts);","// extracted by mini-css-extract-plugin\nexport default {\"profileWindow\":\"ProfileInfo_profileWindow__mtP1v\",\"avatar\":\"ProfileInfo_avatar__WXQYW\",\"prfInfo\":\"ProfileInfo_prfInfo__4D4ci\",\"name\":\"ProfileInfo_name__V1IGl\"};","import s from '../ProfileInfo.module.css'\r\nimport React, { useEffect, useState } from 'react';\r\n\r\nconst ProfileStatus = (props) => {\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [status, setStatus] = useState(props.status);\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const deActivateEditMode = () => {\r\n        setEditMode(false)\r\n        if (status != props.status) {\r\n            props.updateUserStatus(status)\r\n        }\r\n    }\r\n\r\n    const onStatusChange = (e) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {!editMode\r\n                ? <div>\r\n                    <span onClick={activateEditMode} >\r\n                        {props.status || '------'}\r\n                    </span>\r\n                </div>\r\n                : <div>\r\n                    <input\r\n                        onChange={onStatusChange}\r\n                        value={status}\r\n                        autoFocus={true}\r\n                        onBlur={deActivateEditMode}\r\n                        placeholder='Введите ваш статус'\r\n                    />\r\n                </div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileStatus;","import Preloader from '../../common/preloader/Preloader';\r\nimport s from './ProfileInfo.module.css';\r\nimport userImg from '../../../assets/images/userImage.png';\r\nimport ProfileStatus from './ProfileStatus/ProfileStatus.jsx';\r\n\r\nconst ProfileInfo = (props) => {\r\n    if (!props.profileData) {\r\n        return <Preloader />\r\n    }\r\n\r\n    return (\r\n        <div className={s.profileWindow}>\r\n\r\n            <img className={s.avatar} src={props.profileData.photos.large != null ? props.profileData.photos.large : userImg} />\r\n\r\n            <div className={s.prfInfo}>\r\n                <h1 className={s.name}> {props.profileData.fullName} </h1>\r\n                <ProfileStatus status={props.status}\r\n                    updateUserStatus={props.updateUserStatus} />\r\n                <p className={s.citi}>Таганрог</p>\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default ProfileInfo;","import MyPostsContainer from './MyPosts/MyPostContainer'\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\r\n\r\nconst Profile = (props) => (\r\n    <div className='app-wrapper-content'>\r\n        <ProfileInfo profileData={props.profileData}\r\n            status={props.status}\r\n            updateUserStatus={props.updateUserStatus} />\r\n        <MyPostsContainer />\r\n    </div>\r\n)\r\n\r\nexport default Profile;","import Profile from './Profile';\r\nimport React, { useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { setProfile, setProfilePage } from \"../../Redux/userReducer\";\r\nimport { getUserStatus, updateUserStatus } from '../../Redux/profileReducer';\r\nimport { withRouter } from '../../hoc/withRouter';\r\nimport { compose } from 'redux';\r\nimport { getProfileData } from '../../Redux/usersSelectors';\r\nimport { getStatus } from '../../Redux/profileSelectors';\r\nimport { getAuthId } from '../../Redux/authSelectors';\r\n\r\nconst ProfileContainer = (props) => {\r\n\r\n    useEffect(() => {\r\n        props.getUserStatus(props.router.params.userId)\r\n        props.setProfilePage(props.router.params.userId)\r\n    }, [props.router.params.userId])\r\n\r\n    return (\r\n        <Profile\r\n            profileData={props.profileData}\r\n            status={props.status}\r\n            updateUserStatus={props.updateUserStatus}\r\n        />\r\n    )\r\n}\r\n\r\nlet mapStateToProps = (state) => ({\r\n    profileData: getProfileData(state),\r\n    status: getStatus(state),\r\n    autorizedUserId: getAuthId(state)\r\n});\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, {\r\n        setProfile,\r\n        setProfilePage,\r\n        getUserStatus,\r\n        updateUserStatus\r\n    }),\r\n    withRouter\r\n)(ProfileContainer)"],"names":["getUsersData","state","user","usersData","getPageSize","pageSize","getTotalUsers","totalUsers","getCurrentPage","selectedPage","currentPage","getIsFetching","isFetching","getFollowingInProgress","followingInProgress","getProfileData","profileData","getPotionSize","portionSize","getCurrentPortion","currentPortion","props","className","s","src","photos","small","userImg","message","likesCount","maxLegth30","maxLengthCreator","reduxForm","form","onSubmitSuccess","result","dispatch","reset","onSubmit","handleSubmit","Field","component","Textarea","name","placeholder","validate","required","React","Preloader","postsElement","postsData","map","p","id","formData","addPost","post","getStatus","profile","status","getPostData","getNewPostText","newPostText","connect","MyPosts","useState","editMode","setEditMode","setStatus","useEffect","onChange","e","currentTarget","value","autoFocus","onBlur","updateUserStatus","onClick","large","fullName","compose","autorizedUserId","getAuthId","setProfile","setProfilePage","getUserStatus","withRouter","router","params","userId"],"sourceRoot":""}