{"version":3,"file":"static/js/736.eec488f0.chunk.js","mappings":"sUAEO,IAAMA,EAAe,SAACC,GAAK,OAAMA,EAAMC,KAAKC,SAAS,EAC/CC,EAAc,SAACH,GAAK,OAAMA,EAAMC,KAAKG,QAAQ,EAC7CC,EAAgB,SAACL,GAAK,OAAMA,EAAMC,KAAKK,UAAU,EACjDC,EAAiB,SAACP,GAAK,OAAMA,EAAMC,KAAKO,aAAaC,WAAW,EAChEC,EAAgB,SAACV,GAAK,OAAMA,EAAMC,KAAKU,UAAU,EACjDC,EAAyB,SAACZ,GAAK,OAAMA,EAAMC,KAAKY,mBAAmB,EACnEC,EAAiB,SAACd,GAAK,OAAMA,EAAMC,KAAKc,WAAW,EACnDC,EAAgB,SAAChB,GAAK,OAAMA,EAAMC,KAAKgB,WAAW,EAClDC,EAAoB,SAAClB,GAAK,OAAMA,EAAMC,KAAKO,aAAaW,cAAc,C,iFCTnF,GAAgB,WAAa,4BAA4B,SAAW,0BAA0B,KAAO,uB,SCSrG,EARgB,SAACC,GACb,OACI,gBAAKC,UAAWC,EAAAA,QAAU,UACtB,uBAAIF,EAAMG,WAGtB,E,iDCAMC,GAAcC,EAAAA,EAAAA,GAAiB,KAoBrC,GAFyBC,EAAAA,EAAAA,GAAU,CAAEC,KAAM,gBAAiBC,gBAtBxC,SAACC,EAAQC,GACzBA,GAASC,EAAAA,EAAAA,IAAM,iBACnB,GAoByBL,EAhBF,SAACN,GAAK,OACzB,kBAAMY,SAAUZ,EAAMa,aAAa,WAC/B,0BACI,SAACC,EAAA,EAAK,CACFC,UAAWC,EAAAA,EACXC,KAAK,UACLC,YAAY,8HACZC,SAAU,CAACC,EAAAA,EAAUhB,QAG7B,0BACI,4BAAQ,+DAET,ICMX,EAzBgB,SAACJ,GAEb,IAKIqB,EAAmBrB,EAAMsB,aAAaC,KAAI,SAACC,GAAC,OAAK,SAAC,EAAO,CAAYrB,QAASqB,EAAErB,SAAjBqB,EAAEC,GAA0B,IAE/F,OACI,gBAAKxB,UAAU,sBAAqB,UAChC,iBAAKA,UAAWC,EAAAA,WAAa,WACzB,gBAAKD,UAAWC,EAAAA,WAGhB,iBAAKD,UAAWC,EAAAA,SAAW,UACtBmB,GACD,SAAC,EAAgB,CAACT,SAfjB,SAACc,GACd1B,EAAM2B,YAAYD,EAASvB,QAC/B,WAmBJ,E,8ECvBIyB,EAA6B,SAAChD,GAAK,MAAM,CACzCiD,OAAQjD,EAAMkD,KAAKD,OACtB,E,oBCNYE,EAAiB,SAACnD,GAAK,OAAMA,EAAMuB,QAAQmB,YAAY,ECcpE,GAAeU,EAAAA,EAAAA,KACXC,EAAAA,EAAAA,KAPkB,SAACrD,GAAK,MAAM,CAC9BsD,UAAUvD,EAAAA,EAAAA,IAAaC,GACvB0C,aAAcS,EAAenD,GAChC,GAI4B,CAAE+C,YAAAA,EAAAA,KFPC,SAACQ,GAAe,IACtCC,EAAiB,qGAIlB,OAJkB,8BACnB,WACI,OAAKC,KAAKrC,MAAM6B,QACT,SAACM,GAAS,UAAKE,KAAKrC,SADI,SAAC,KAAQ,CAACsC,GAAG,UAEhD,KAAC,EAJkB,CAASC,EAAAA,WAShC,OAFqCN,EAAAA,EAAAA,IAAQL,EAARK,CAAoCG,EAG7E,GELA,CAGEI,E","sources":["Redux/usersSelectors.js","webpack://my-app/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/Message/Message.jsx","components/Dialogs/MessageReduxForm/MessageReduxForm.jsx","components/Dialogs/Dialogs.jsx","hoc/WithAuthRedirect.jsx","Redux/messageSelectors.js","components/Dialogs/DialogsContainer.jsx"],"sourcesContent":["import { createSelector } from \"reselect\";\r\n\r\nexport const getUsersData = (state) => (state.user.usersData);\r\nexport const getPageSize = (state) => (state.user.pageSize);\r\nexport const getTotalUsers = (state) => (state.user.totalUsers);\r\nexport const getCurrentPage = (state) => (state.user.selectedPage.currentPage);\r\nexport const getIsFetching = (state) => (state.user.isFetching);\r\nexport const getFollowingInProgress = (state) => (state.user.followingInProgress);\r\nexport const getProfileData = (state) => (state.user.profileData);\r\nexport const getPotionSize = (state) => (state.user.portionSize);\r\nexport const getCurrentPortion = (state) => (state.user.selectedPage.currentPortion)\r\n\r\n/* export const getUsersData = createSelector(getUsersDataSelector, (usersData) => (usersData)) */","// extracted by mini-css-extract-plugin\nexport default {\"messageBox\":\"Dialogs_messageBox__Hz2Gl\",\"messages\":\"Dialogs_messages__OhduN\",\"link\":\"Dialogs_link__PrWue\"};","import s from '../Dialogs.module.css';\r\n\r\nconst Message = (props) => {\r\n    return (\r\n        <div className={s.message}>\r\n            <p>{props.message}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Message;","import { reduxForm, Field, reset } from \"redux-form\";\r\nimport { required, maxLengthCreator } from '../../../utils/validators/validators';\r\nimport { Textarea } from '../../common/FormsControls/FormControls';\r\n\r\nconst afterSubmit = (result, dispatch) => {\r\n    dispatch(reset('dialogMessage'))\r\n}\r\n\r\nconst maxLegth300 = maxLengthCreator(300)\r\n\r\nconst addMessageForm = (props) => (\r\n    <form onSubmit={props.handleSubmit}>\r\n        <div>\r\n            <Field\r\n                component={Textarea}\r\n                name='message'\r\n                placeholder='Введите ваше сообщение '\r\n                validate={[required, maxLegth300]}\r\n            />\r\n        </div>\r\n        <div>\r\n            <button>Отправить</button>\r\n        </div>\r\n    </form>\r\n)\r\n\r\nconst MessageReduxForm = reduxForm({ form: 'dialogMessage', onSubmitSuccess: afterSubmit })(addMessageForm);\r\n\r\nexport default MessageReduxForm;","import s from './Dialogs.module.css';\r\nimport Message from './Message/Message';\r\nimport MessageReduxForm from './MessageReduxForm/MessageReduxForm'\r\n\r\nconst Dialogs = (props) => {\r\n\r\n    const onSubmit = (formData) => {\r\n        props.sendMessage(formData.message)\r\n    }\r\n\r\n    /*    let dialogsElement = props.userData.map((d) => <Dialog key={d.id} Name={d.name} id={d.id}  avatar={d.avatar}  />); */\r\n    let messagesElements = props.messagesData.map((m) => <Message key={m.id} message={m.message} />);\r\n\r\n    return (\r\n        <div className='app-wrapper-content'>\r\n            <div className={s.messageBox}>\r\n                <div className={s.dialogs}>\r\n                    {/*    {dialogsElement}  */}\r\n                </div>\r\n                <div className={s.messages}>\r\n                    {messagesElements}\r\n                    <MessageReduxForm onSubmit={onSubmit} />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default Dialogs;","import React from \"react\";\r\nimport { Navigate } from \"react-router-dom\";\r\nimport { connect } from 'react-redux';\r\n\r\nlet mapStateToPropsForRedirect = (state) => ({\r\n    isAuth: state.auth.isAuth\r\n});\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n    class RedirectComponent extends React.Component {\r\n        render() {\r\n            if (!this.props.isAuth) return <Navigate to='/login' />;\r\n            return <Component {...this.props} />\r\n        }\r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent);\r\n\r\n    return ConnectedAuthRedirectComponent;\r\n}\r\n","export const getMessageData = (state) => (state.message.messagesData);","import { sendMessage } from '../../Redux/messageReducer';\r\nimport Dialogs from './Dialogs';\r\nimport { connect } from 'react-redux';\r\nimport { withAuthRedirect } from '../../hoc/WithAuthRedirect';\r\nimport { compose } from 'redux';\r\nimport { getUsersData } from '../../Redux/usersSelectors';\r\nimport { getMessageData } from '../../Redux/messageSelectors';\r\n\r\nlet mapStateToProps = (state) => ({\r\n    userData: getUsersData(state),\r\n    messagesData: getMessageData(state)\r\n});\r\n\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, { sendMessage }),\r\n    withAuthRedirect\r\n)(Dialogs);"],"names":["getUsersData","state","user","usersData","getPageSize","pageSize","getTotalUsers","totalUsers","getCurrentPage","selectedPage","currentPage","getIsFetching","isFetching","getFollowingInProgress","followingInProgress","getProfileData","profileData","getPotionSize","portionSize","getCurrentPortion","currentPortion","props","className","s","message","maxLegth300","maxLengthCreator","reduxForm","form","onSubmitSuccess","result","dispatch","reset","onSubmit","handleSubmit","Field","component","Textarea","name","placeholder","validate","required","messagesElements","messagesData","map","m","id","formData","sendMessage","mapStateToPropsForRedirect","isAuth","auth","getMessageData","compose","connect","userData","Component","RedirectComponent","this","to","React","Dialogs"],"sourceRoot":""}